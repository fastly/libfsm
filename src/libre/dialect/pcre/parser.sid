/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/* Regular expressions, as evaluated by PCRE, which supports the
 * patterns listed at:
 *     http://pcre.org/current/doc/html/pcre2pattern.html
 *
 * Note that not all PCRE regex extensions are supported yet.
 * For unsupported extensions, our intension is to explicitly
 * return an 'unsupported' error, rather than treating the
 * unrecognized syntax incorrectly.
 * */

%types%

	pos;
	char;
	unsigned;
	!pred;
	re_flags;
	!err;
	ast_expr;
        ast_char_class_id;
	ast_count;
	char_class_ast;
	range_endpoint;

%terminals%

	ANY;
	!MANY;
	OPT;
	PLUS;
	ALT;
	SEP;
	STAR;

	START;
	END;

	OPENSUB; OPENCAPTURE; CLOSE;
	OPENGROUP: () -> (:pos, :pos); CLOSEGROUP: () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos); CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CHAR_CLASS: () -> (:ast_char_class_id, :pos, :pos);

	OPENFLAGS;
	CLOSEFLAGS;
	NEGATE;
	FLAG_UNKNOWN;
	FLAG_INSENSITIVE: () -> (:re_flags);

	ESC:     () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	CONTROL: () -> (:char, :pos, :pos);
	OCT:     () -> (:char, :pos, :pos);
	HEX:     () -> (:char, :pos, :pos);
	CHAR:    () -> (:char, :pos, :pos);
	COUNT:   () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	<err-expected-term>;
	<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	<err-expected-range>;
	<err-expected-closegroup>;
	!<err-expected-groupbody>;
	<err-unknown-flag>;
	<err-expected-closeflags>;
	<err-expected-eof>;
	<err-unsupported>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();

	<ast-expr-empty>: () -> (:ast_expr);
	<ast-expr-literal>: (:char) -> (:ast_expr);
	<ast-expr-concat>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-alt>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-any>: () -> (:ast_expr);

        <ast-expr-atom>: (:ast_expr, :ast_count) -> (:ast_expr);
        !<ast-expr-atom-any>: (:ast_count) -> (:ast_expr);
	<ast-expr-char-class>: (:char_class_ast, :pos, :pos) -> (:ast_expr);
        <ast-expr-group>: (:ast_expr) -> (:ast_expr);
	<ast-expr-re-flags>: (:re_flags, :re_flags) -> (:ast_expr);
	<ast-expr-anchor-start>: () -> (:ast_expr);
	<ast-expr-anchor-end>: () -> (:ast_expr);

        <atom-kleene>: () -> (:ast_count);
        <atom-plus>: () -> (:ast_count);
        <atom-one>: () -> (:ast_count);
        <atom-opt>: () -> (:ast_count);

        <expr-count>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<char-class-ast-literal>: (:char) -> (:char_class_ast);
	!<char-class-ast-range-distinct>: (:range_endpoint, :pos, :range_endpoint, :pos) -> ();
	<char-class-ast-range>: (:range_endpoint, :pos, :range_endpoint, :pos) -> (:char_class_ast);
	<char-class-ast-concat>: (:char_class_ast, :char_class_ast) -> (:char_class_ast);
	!<char-class-ast-subtract>: (:char_class_ast, :char_class_ast) -> (:char_class_ast);
	<char-class-ast-named-class>: (:ast_char_class_id) -> (:char_class_ast);

	<char-class-ast-flag-none>: () -> (:char_class_ast);
	<char-class-ast-flag-invert>: () -> (:char_class_ast);
	!<char-class-ast-flag-minus>: () -> (:char_class_ast);
	!<char-class-ast-flag-invert-minus>: () -> (:char_class_ast);

	<ast-range-endpoint-literal>: (:char) -> (:range_endpoint);
	<ast-range-endpoint-char-class>: (:ast_char_class_id) -> (:range_endpoint);

	<re-flag-none>: () -> (:re_flags);
	<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	expr: () -> (node :ast_expr) [
		literal: () -> (node :ast_expr) = {
			{
				(c, !, !) = ESC;
				||
				(c, !, !) = OCT;
				||
				(c, !, !) = HEX;
				||
				(c, !, !) = CHAR;
			};
			node = <ast-expr-literal>(c);
		};
		    
		char-class: () -> (node :ast_expr) [
			char-class-head: () -> (f :char_class_ast) = {
				(!) = INVERT;
				f = <char-class-ast-flag-invert>();
			||
				f = <char-class-ast-flag-none>();
			};


			class-literal: () -> (node :char_class_ast) = {
				{
					(c, !, !) = ESC;
					||
					(c, !, !) = OCT;
					||
					(c, !, !) = HEX;
					||
					(c, !, !) = CHAR;
					||
					(c, !, !) = CONTROL;
					<err-unsupported>();
				};
				node = <char-class-ast-literal>(c);
	  		};

			class-named: () -> (k :ast_char_class_id, start :pos, end :pos) = {
				(k, start, end) = NAMED_CHAR_CLASS;
			};


			class-range: () -> (node :char_class_ast, start :pos, end :pos) [
				range-endpoint-literal: () -> (r :range_endpoint, start :pos, end :pos) = {
					{
						(c, start, end) = ESC;
					||
						(c, start, end) = OCT;
					||
						(c, start, end) = HEX;
					||
						(c, start, end) = CHAR;
					||
						(c, start, end) = CONTROL;
						<err-unsupported>();
					};
					r = <ast-range-endpoint-literal>(c);
				};

				range-endpoint-char-class: () -> (r :range_endpoint, start :pos, end :pos) = {
					(id, start, end) = class-named();
					r = <ast-range-endpoint-char-class>(id);
				};
			] = {
				{
					(lower, l_start, l_end) = range-endpoint-literal();
				||
					(lower, l_start, l_end) = range-endpoint-char-class();
				};

				{
					(!, !, !) = RANGE;
				##
					<err-expected-range>;
				};
	
				{
					(upper, u_start, u_end) = range-endpoint-literal();
				||
					(upper, u_start, u_end) = range-endpoint-char-class();
				||
					/* allow literal '-' as end of range */
					(c, u_start, u_end) = RANGE;
					upper = <ast-range-endpoint-literal>(c);
				};
	
				<mark-range>(l_start, u_end);
				start = l_start;
				end = u_end;
				node = <char-class-ast-range>(lower, l_start, upper, u_end);
			};

			class-term: () -> (node :char_class_ast) = {
				node = class-literal();
			||
				(node, !, !) = class-range();
			||
				(id, !, !) = class-named();
				node = <char-class-ast-named-class>(id);
			##
				<err-expected-term>;
				node = <char-class-ast-flag-none>(); /* appease sid */
			};

			list-of-char-class-terms: () -> (node :char_class_ast) = {
				l = class-term();
				{
					r = list-of-char-class-terms();
					node = <char-class-ast-concat>(l, r);
				||
					node = l;
				};
			};
		] = {
			(start, !) = OPENGROUP;
			head = char-class-head();
			body = list-of-char-class-terms();

                        {
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
                                end = start; /* appease sid */
			};

			hb = <char-class-ast-concat>(head, body);
			node = <ast-expr-char-class>(hb, start, end);
		};

		char-type: () -> (node :ast_expr) = {
				(id, start, end) = NAMED_CHAR_CLASS;
				named = <char-class-ast-named-class>(id);
				node = <ast-expr-char-class>(named, start, end);
		};
			
                flags: () -> (node :ast_expr) [
			flag_set: (i :re_flags) -> (o :re_flags) = {
				c = FLAG_INSENSITIVE;
				o = <re-flag-union>(i, c);
			||
				FLAG_UNKNOWN;
				o = i;
				<err-unknown-flag>;
			};
		] = {
			OPENFLAGS;

			empty_pos = <re-flag-none>();
			empty_neg = <re-flag-none>();

			{
				pos = flag_set(empty_pos);
			||
				pos = empty_pos;
			};

			{
				NEGATE;
				neg = flag_set(empty_neg);
			||
				neg = empty_neg;
			};

			{
				CLOSEFLAGS;
				node = <ast-expr-re-flags>(pos, neg);
			##
				<err-expected-closeflags>;
				node = <ast-expr-empty>();
			};
                };

		atom: () -> (node :ast_expr) = {
			/* Note that START and END can appear embedded
			 * within a list of atoms. Whether that makes
			 * the regex inherently unmatchable depends on
			 * whether the surrounding context is nullable
			 * or not, so that's detected after parsing has
			 * finished. */
			{
				OPENCAPTURE;
				g = expr();
				e = <ast-expr-group>(g);
                                {
					CLOSE;
                                ##
                        		<err-expected-alts>;
				};
			||
				OPENSUB;
				e = expr();
                                {
					CLOSE;
                                ##
                        		<err-expected-alts>;
				};
			||
				e = char-class();
			||
				e = char-type();
			||
				e = literal();
			||
				e = flags();
			||
				START;
				e = <ast-expr-anchor-start>();
			||
				END;
				e = <ast-expr-anchor-end>();
			||
				ANY;
				e = <ast-expr-any>();
			||
				(!, !, !) = CONTROL;
				<err-unsupported>();
				e = <ast-expr-empty>(); /* appease sid */
			};

			{
				(start, !) = OPENCOUNT;
				m = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <expr-count>(m, start, m, end);
				node = <ast-expr-atom>(e, c);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				n = COUNT;
				(end, !) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <expr-count>(m, start, n, end);
				node = <ast-expr-atom>(e, c);
			||
				OPT;
				c = <atom-opt>();
				node = <ast-expr-atom>(e, c);
			||
				STAR;
				c = <atom-kleene>();
				node = <ast-expr-atom>(e, c);
			||
				PLUS;
				c = <atom-plus>();
				node = <ast-expr-atom>(e, c);
			||
				c = <atom-one>();
				node = <ast-expr-atom>(e, c);
			##
				<err-expected-count>;
				node = e;
			};

                };

		list-of-atoms: () -> (node :ast_expr) = {
			a = atom();
			r = <ast-expr-empty>;
			node = <ast-expr-concat>(a,r);
		||
			a = atom();
			r = list-of-atoms();
			node = <ast-expr-concat>(a,r);
		};

		alt: () -> (node :ast_expr) = {
			node = list-of-atoms();
		};

		list-of-alts: () -> (node :ast_expr) = {
			a = alt();
			r = <ast-expr-empty>;
			node = <ast-expr-alt>(a,r);
		||
			/* Explicitly allow e.g. (xyz|) */
			a = <ast-expr-empty>;
			r = <ast-expr-empty>;
			node = <ast-expr-alt>(a,r);
	  	||
			a = alt();
			ALT;
			r = list-of-alts();
			node = <ast-expr-alt>(a, r);
		##
		        node = <ast-expr-empty>();
		};
	] = {
		/* don't wrap a single alt in an alt chain */
		node = alt();
	||
		/* keep alts into a linked list -- every right node
		 * is either another alt or empty. */
		a = alt();
		ALT;
		r = list-of-alts();
		node = <ast-expr-alt>(a, r);
	##
		<err-expected-alts>;
		node = <ast-expr-empty>();
	};

	re_pcre: () -> (node :ast_expr) = {
		{
			node = expr();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_pcre;

