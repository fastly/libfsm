/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * TODO: explain choices. e.g. i'm not permitting () or ||. only the root expression is allowed to be empty.
 * TODO: explain strategy: pass in x,y endpoints top-down
 */

%types%

	pos;
	char;
	unsigned;
	!re_flags;
	!err;
	ast_expr;
        ast_char_class_id;
	ast_count;
	char_class_ast;
	range_endpoint;

%terminals%

	ANY;
	!MANY;
	OPT;
	PLUS;
	ALT;
	SEP;
	STAR;

	START;
	END;

	OPENSUB;   CLOSESUB;
	OPENGROUP: () -> (:pos, :pos); CLOSEGROUP: () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos); CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CHAR_CLASS: () -> (:ast_char_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	ESC:      () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	OCT:      () -> (:char, :pos, :pos);
	HEX:      () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);
	COUNT:    () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	<ast-expr-empty>: () -> (:ast_expr);
	<ast-expr-literal>: (:char) -> (:ast_expr);
	<ast-expr-concat>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-alt>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-any>: () -> (:ast_expr);

        <ast-expr-atom>: (:ast_expr, :ast_count) -> (:ast_expr);
        !<ast-expr-atom-any>: (:ast_count) -> (:ast_expr);
	<ast-expr-char-class>: (:char_class_ast, :pos, :pos) -> (:ast_expr);
        <ast-expr-group>: (:ast_expr) -> (:ast_expr);
	!<ast-expr-re-flags>: (:re_flags, :re_flags) -> (:ast_expr);
	<ast-expr-anchor-start>: () -> (:ast_expr);
	<ast-expr-anchor-end>: () -> (:ast_expr);

        <atom-kleene>: () -> (:ast_count);
        <atom-plus>: () -> (:ast_count);
        <atom-one>: () -> (:ast_count);
        <atom-opt>: () -> (:ast_count);

        <expr-count>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<char-class-ast-literal>: (:char) -> (:char_class_ast);
	<char-class-ast-range-distinct>: (:range_endpoint, :pos, :range_endpoint, :pos) -> ();
	<char-class-ast-range>: (:range_endpoint, :pos, :range_endpoint, :pos) -> (:char_class_ast);
	<char-class-ast-concat>: (:char_class_ast, :char_class_ast) -> (:char_class_ast);
	!<char-class-ast-subtract>: (:char_class_ast, :char_class_ast) -> (:char_class_ast);
	<char-class-ast-named-class>: (:ast_char_class_id) -> (:char_class_ast);

	<char-class-ast-flag-none>: () -> (:char_class_ast);
	<char-class-ast-flag-invert>: () -> (:char_class_ast);
	!<char-class-ast-flag-minus>: () -> (:char_class_ast);
	!<char-class-ast-flag-invert-minus>: () -> (:char_class_ast);

	<ast-range-endpoint-literal>: (:char) -> (:range_endpoint);
	!<ast-range-endpoint-char-class>: (:ast_char_class_id) -> (:range_endpoint);

	!<re-flag-none>: () -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	<err-expected-term>;
	<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	<err-expected-range>;
	<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	<err-expected-eof>;
	!<err-unsupported>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();

	expr: () -> (node :ast_expr) [
		literal: () -> (node :ast_expr) = {
			{
				(c, !, !) = ESC;
				||
				(c, !, !) = OCT;
				||
				(c, !, !) = HEX;
				||
				(c, !, !) = CHAR;
			};
			node = <ast-expr-literal>(c);
  		};

		char-class: () -> (node :ast_expr) [
			/* TODO: []] [-]] etc.? though they can be escaped. */
			char-class-head: () -> (f :char_class_ast) = {
				(!) = INVERT;
				f = <char-class-ast-flag-invert>();
			||
				f = <char-class-ast-flag-none>();
			};

			class-literal: () -> (node :char_class_ast) = {
				{
					(c, !, !) = ESC;
					||
					(c, !, !) = OCT;
					||
					(c, !, !) = HEX;
					||
					(c, !, !) = CHAR;
				};
				node = <char-class-ast-literal>(c);
	  		};

			class-range: () -> (node :char_class_ast) = {
				{
					(ca, start, !) = ESC;
				||
					(ca, start, !) = OCT;
				||
					(ca, start, !) = HEX;
				||
					(ca, start, !) = CHAR;
				};
				a = <ast-range-endpoint-literal>(ca);
				
				{
					(!, !, !) = RANGE;
				##
					<err-expected-range>;
				};
	
				{
					(cz, !, end) = ESC;
				||
					(cz, !, end) = OCT;
				||
					(cz, !, end) = HEX;
				||
					(cz, !, end) = CHAR;
				||
					(cz, !, end) = RANGE;
				};
				z = <ast-range-endpoint-literal>(cz);
	
				<mark-range>(start, end);
				<char-class-ast-range-distinct>(a, start, z, end);
				node = <char-class-ast-range>(a, start, z, end);
			};

			class-named: () -> (id :ast_char_class_id) = {
                        	(id, !, !) = NAMED_CHAR_CLASS;
			};

			class-term: () -> (node :char_class_ast) = {
				node = class-literal();
			||
				node = class-range();
			||
				id = class-named();
				node = <char-class-ast-named-class>(id);
			##
				<err-expected-term>();
				/* workaround sid warning */
                                node = <char-class-ast-flag-none>();
			};
			    
			list-of-char-class-terms: () -> (node :char_class_ast) = {
				l = class-term();
				{
					r = list-of-char-class-terms();
					node = <char-class-ast-concat>(l, r);
				||
					node = l;
				};
			};
		] = {
			(start, !) = OPENGROUP;
			head = char-class-head();
			body = list-of-char-class-terms();

                        {
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
                                end = start; /* appease sid */
			};

			hb = <char-class-ast-concat>(head, body);
			node = <ast-expr-char-class>(hb, start, end);
		};

		atom: () -> (node :ast_expr) = {
			{
				OPENSUB;
				g = expr();
				e = <ast-expr-group>(g);
                                {
					CLOSESUB;
                                ##
                        		<err-expected-alts>;
                                };
			||
				e = char-class();
			||
				e = literal();
			||
				START;
				e = <ast-expr-anchor-start>();
			||
				END;
				e = <ast-expr-anchor-end>();
			||
				ANY;
				e = <ast-expr-any>();
			};

			{
				(start, !) = OPENCOUNT;
				m = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <expr-count>(m, start, m, end);
				node = <ast-expr-atom>(e, c);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				n = COUNT;
				(end, !) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <expr-count>(m, start, n, end);
				node = <ast-expr-atom>(e, c);
			||
				OPT;
				c = <atom-opt>();
				node = <ast-expr-atom>(e, c);
			||
				STAR;
				c = <atom-kleene>();
				node = <ast-expr-atom>(e, c);
			||
				PLUS;
				c = <atom-plus>();
				node = <ast-expr-atom>(e, c);
			||
				c = <atom-one>();
				node = <ast-expr-atom>(e, c);
			##
				<err-expected-count>;
				node = e;
			};
		};

		list-of-atoms: () -> (node :ast_expr) = {

		/* TODO: start/end anchors */
			a = atom();
			r = <ast-expr-empty>;
			node = <ast-expr-concat>(a,r);
		||
			a = atom();
			r = list-of-atoms();
			node = <ast-expr-concat>(a,r);
		};

		alt: () -> (node :ast_expr) = {
			node = list-of-atoms();
		};

		list-of-alts: () -> (node :ast_expr) = {
			a = alt();
			r = <ast-expr-empty>;
			node = <ast-expr-alt>(a,r);
	  	||
			a = alt();
			ALT;
			r = list-of-alts();
			node = <ast-expr-alt>(a, r);
		##
			<err-expected-alts>;
			node = <ast-expr-empty>();
		};
	] = {
		/* don't wrap a single alt in an alt chain */
		node = alt();
	||
		/* keep alts into a linked list -- every right node
		 * is either another alt or empty. */
		a = alt();
		ALT;
		r = list-of-alts();
		node = <ast-expr-alt>(a, r);
	##
		<err-expected-alts>;
		node = <ast-expr-empty>();
	};

	re_native: () -> (node :ast_expr) = {
		{
			node = expr();
		||
			node = <ast-expr-empty>();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_native;

